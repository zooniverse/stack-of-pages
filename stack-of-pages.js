// Generated by CoffeeScript 1.4.0
(function() {
  var StackOfPages,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  StackOfPages = (function() {
    var Page;

    Page = (function() {

      Page.prototype.el = null;

      function Page(content) {
        this.el = document.createElement('div');
        this.el.className = 'page-in-a-stack';
        this.el.innerHTML = content;
      }

      return Page;

    })();

    StackOfPages.prototype["default"] = '#/';

    StackOfPages.prototype.hashes = null;

    StackOfPages.prototype.tagName = 'div';

    StackOfPages.prototype.className = 'stack-of-pages';

    StackOfPages.prototype.activeClass = 'active';

    StackOfPages.prototype.inactiveClass = 'inactive';

    StackOfPages.prototype.changeDisplay = true;

    StackOfPages.prototype.elProperties = ['el'];

    StackOfPages.prototype.el = null;

    StackOfPages.prototype.activeController = null;

    function StackOfPages(params) {
      var controller, controllerEl, hash, preControllerThing, property, value, _ref;
      if (params == null) {
        params = {};
      }
      this.onHashChange = __bind(this.onHashChange, this);

      for (property in params) {
        value = params[property];
        this[property] = value;
      }
      this.el = document.createElement(this.tagName);
      this.el.className = this.className;
      _ref = this.hashes;
      for (hash in _ref) {
        preControllerThing = _ref[hash];
        controller = typeof preControllerThing === 'function' ? new preControllerThing : typeof preControllerThing === 'string' ? new Page(preControllerThing) : 'jquery' in preControllerThing ? preControllerThing.get(0) : preControllerThing;
        this.hashes[hash] = controller;
        controllerEl = this.getElOfController(controller);
        if ('jquery' in controllerEl) {
          controllerEl = controllerEl.get(0);
        }
        controllerEl.setAttribute('data-stack-of-pages-hash', hash);
        this.el.appendChild(controllerEl);
      }
      addEventListener('hashchange', this.onHashChange);
      this.onHashChange();
    }

    StackOfPages.prototype.onHashChange = function() {
      var controller, controllerEl, currentHash, foundMatch, hash, hashPattern, hashPatternSegments, hashSegments, i, matches, param, params, paramsOrder, segment, _i, _len, _ref, _ref1;
      ((_ref = this.activeController) != null ? _ref.deactivate : void 0) != null;
      currentHash = location.hash || this["default"];
      foundMatch = false;
      _ref1 = this.hashes;
      for (hash in _ref1) {
        controller = _ref1[hash];
        paramsOrder = ['hash'];
        hashSegments = hash.split('/');
        hashPatternSegments = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = hashSegments.length; _i < _len; _i++) {
            segment = hashSegments[_i];
            switch (segment.charAt(0)) {
              case ':':
                paramsOrder.push(segment.slice(1));
                _results.push('([^\/]+)');
                break;
              case '*':
                paramsOrder.push('_');
                _results.push('?(.*)');
                break;
              default:
                _results.push(segment);
            }
          }
          return _results;
        })();
        hashPattern = "^" + (hashPatternSegments.join('/')) + "/?$";
        matches = currentHash.match(hashPattern);
        controllerEl = this.el.querySelector("[data-stack-of-pages-hash='" + hash + "']");
        if (matches != null) {
          foundMatch = true;
          params = {
            hashPattern: hashPattern
          };
          for (i = _i = 0, _len = paramsOrder.length; _i < _len; i = ++_i) {
            param = paramsOrder[i];
            params[param] = matches[i];
          }
          try {
            this.activatePage(controller, params);
          } catch (e) {
            if ('ERROR' in this.hashes) {
              params.error = e;
            } else {
              throw e;
            }
          }
        } else {
          this.deactivatePage(controller, params);
        }
      }
      if ((params != null ? params.error : void 0) != null) {
        this.activatePage(this.hashes.ERROR, params);
      }
      if (!foundMatch) {
        if ('NOT_FOUND' in this.hashes) {
          return this.activatePage(this.hashes.NOT_FOUND, params);
        }
      }
    };

    StackOfPages.prototype.activate = function(params) {
      if (!(params.hash in this.hashes)) {
        if (this["default"] in this.hashes) {
          return this.activatePage(this.hashes[this["default"]]);
        }
      }
    };

    StackOfPages.prototype.getElOfController = function(controller) {
      var property;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.elProperties;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          property = _ref[_i];
          if (controller[property] != null) {
            _results.push(controller[property]);
          }
        }
        return _results;
      }).call(this))[0];
    };

    StackOfPages.prototype.activatePage = function(controller, params) {
      var controllerEl;
      controllerEl = this.getElOfController(controller);
      if (this.changeDisplay) {
        controllerEl.style.display = '';
      }
      this.toggleClass(controllerEl, this.activeClass, true);
      this.toggleClass(controllerEl, this.inactiveClass, false);
      return typeof controller.activate === "function" ? controller.activate(params) : void 0;
    };

    StackOfPages.prototype.deactivatePage = function(controller, params) {
      var controllerEl;
      controllerEl = this.getElOfController(controller);
      if (this.changeDisplay) {
        controllerEl.style.display = 'none';
      }
      this.toggleClass(controllerEl, this.activeClass, false);
      this.toggleClass(controllerEl, this.inactiveClass, true);
      return typeof controller.deactivate === "function" ? controller.deactivate(params) : void 0;
    };

    StackOfPages.prototype.toggleClass = function(el, className, condition) {
      var alreadyThere, classList;
      classList = el.className.split(/\s+/);
      alreadyThere = __indexOf.call(classList, className) >= 0;
      if (condition && !alreadyThere) {
        classList.push(className);
      }
      if (!condition && alreadyThere) {
        classList.splice(classList.indexOf(className), 1);
      }
      return el.className = classList.join(' ');
    };

    return StackOfPages;

  })();

  window.StackOfPages = StackOfPages;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = StackOfPages;
  }

}).call(this);
